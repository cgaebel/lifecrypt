Lifecrypt stores my root of trust such as 2fa keys or master passwords,
encrypted, on disk. I can view and edit the root by operating on data
only in memory.

Encryption and authentication is provided by NaCl's "secret box",
aka XSalsa20Poly1305. Password stretching is provided by scrypt.

Threat Model
------------
The on-disk data is considered public and owned by the attacker.
They would like to read it. The attacker is likely a friend or family
member, or someone with access to them.

Or the file could be leaked onto the internet, and a smart 14-year
kid with a lot of free time will try disproportionally hard to break
into it.

The attacker does not have access to the computer on which the file
is stored at the time it's edited or viewed. They only have access
well after the fact.

Constraints
-----------
It needs to be easy to interpret the file even if the code that would
do that has entirely rotted. Even if there's no rust compiler in the
future, the words in this document and a copy of the file should be
enough to decrypt it.

A human has to enter the password to unlock the file. The password
should only need to be proivided once per edit/view.

Disk Format
-----------
The on-disk format is a single JSON object with the following keys:

nonce: Base62 encoded NONCEBYTES, as required by NaCl.
ciphertext: Base62 encoded ciphertext, as generated by NaCl.

Base62's alphabet is [0-9][A-Z][a-z].

This would look something like:

{ "nonce": "ABC123abc", "ciphertext": "1234" }

Decoding
--------
To decode the encrypted data, you must know the password. Then,

key = sha256(scrypt(password, log_n=15, r=8, p=1))
secretbox::open(disk.ciphertext, disk.nonce, key)
